import { useEffect, useState } from "react";
import { Button, Form } from "react-bootstrap";
import { Modal } from "react-bootstrap";
import $ from "jquery";
const Http = () => {
  const [data, setData] = useState([]);
  const [count, setCount] = useState(0);
  const [modal, setModal] = useState(false);
  const [slide, setSlide] = useState("animate__animated animate__fadeIn");
  const [total, setTotal] = useState(0);
  const [submit, setSubmit] = useState(true);
  const [fields, setFields] = useState({
    title: "",
    body: "",
  });
  const fetchData = () => {
    $.ajax({
      type: "GET",
      url: "http://localhost:3232/",
      success: function (response) {
        return setData(response);
      },
    });
  };
  const fetchDataById = () => {
    $.ajax({
      type: "GET",
      url: `http://localhost:3232/${count}`,
      success: function (response) {
        return setData([response]), setTotal(response.totalComment);
      },
      error: function (err) {
        if (err.status === 404) {
          // return setCount(0);
        }
      },
    });
  };
  useEffect(() => {
    // fetchData();
    fetchDataById();
  }, [count]);
  const next = () => {
    return (
      setCount(count + 1), setSlide("animate__animated animate__slideInRight")
    );
  };
  const prev = () =>
    count > 0 &&
    (setCount(count - 1), setSlide("animate__animated animate__slideInLeft"));

  const updateComment = (e) => {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    const id = data[0].id;
    $.ajax({
      type: "PUT",
      url: `http://localhost:3232/${id}`,
      data: formData,
      contentType: false,
      processData: false,
      success: function (response) {
        return (
          setModal(false),
          setData([
            {
              id:id,
              title: formData.get("title"),
              body: formData.get("body"),
            },
          ])
        );
      },
      error: function (err) {
        console.log(err);
      },
    });
  };
  const deleteComment = (id) => {
    $.ajax({
      type: "DELETE",
      url: `http://localhost:3232/${id}`,
      success: function (response) {
        console.log(response);
      },
      error: function (err) {
        console.log(err);
      },
    });
  };
  const insertComment = (e) => {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    $.ajax({
      type: "POST",
      url: "http://localhost:3232",
      data: formData,
      contentType: false,
      processData: false,
      success: function (response) {
        return setModal(false), setCount(response.data.id);
      },
    });
  };
  const Card = (data) => {
    return (
      <div className={"card mb-4 " + slide}>
        <div className="card-header text-capitalize d-flex justify-content-between">
          <label>{data.userData.title}</label>
          <div>
            <button className="btn btn-light" onClick={() => showModal(false)}>
              <i className="fa fa-edit"></i>
            </button>
            <button
              className="btn btn-light"
              onClick={() => deleteComment(data.userData.id)}
            >
              <i className="fa fa-trash"></i>
            </button>
          </div>
        </div>
        <div className="card-body">{data.userData.body}</div>
      </div>
    );
  };
  const showModal = (isSubmit) => {
    let updateMe = {
      title: "",
      body: "",
    };
    if (!isSubmit) {
      updateMe.title = data[0].title;
      updateMe.body = data[0].body;
    }
    return setModal(true), setSubmit(isSubmit), setFields(updateMe);
  };
  const setValue = (e) => {
    const input = e.target;
    return setFields((old_data) => {
      return {
        ...old_data,
        [input.name]: input.value,
      };
    });
  };
  const design = (
    <>
      <div className="container py-4 overflow-hidden">
        <div className="d-flex justify-content-between mb-4 align-items-center">
          <h1 className="m-0 p-0 display-6">
            Comments - {count} / {total}
          </h1>
          <button className="btn btn-success" onClick={() => showModal(true)}>
            New Comment
          </button>
        </div>
        {data.map((item) => {
          return <Card userData={item} key={item.id} />;
        })}
        <div className="d-flex justify-content-end">
          <button className="btn btn-light border me-2 px-3" onClick={prev}>
            Prev
          </button>
          <button
            className="btn btn-light border px-3"
            onClick={count < total && next}
          >
            Next
          </button>
          <Modal show={modal} onHide={() => setModal(false)}>
            <Modal.Header closeButton>
              <Modal.Title>Add new comment</Modal.Title>
            </Modal.Header>
            <Modal.Body>
              <Form onSubmit={submit ? insertComment : updateComment}>
                <div className="mb-3">
                  <label className="mb-1">Title</label>
                  <input
                    className="form-control"
                    type={"text"}
                    name={"title"}
                    value={fields.title}
                    onChange={setValue}
                  />
                </div>
                <div className="mb-3">
                  <label className="mb-1">Description</label>
                  <textarea
                    rows={4}
                    className="form-control"
                    type={"text"}
                    name={"body"}
                    value={fields.body}
                    onChange={setValue}
                  ></textarea>
                </div>
                {submit ? (
                  <button className="btn btn-primary">Submit</button>
                ) : (
                  <button className="btn btn-dark">Update</button>
                )}
              </Form>
            </Modal.Body>
          </Modal>
        </div>
      </div>
    </>
  );
  return design;
};
export default Http;
